using CodeJam.tools;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeJam
{

    class Solver
    {

        static bool[,] cache = new bool[200, 200];
        static decimal golden;
        static Solver()
        {
            golden = (1 + (decimal)Math.Sqrt(5)) / 2;
            StringBuilder sb = new StringBuilder();
            for (int a = 0; a < cache.GetLength(0); a++)
            {
                for (int b = 0; b < cache.GetLength(0); b++)
                {
                    bool res = false;

                    if (a == b)
                        res = false;
                    else if (a == 0 || b == 0)
                        res = true;
                    else
                    {
                        int big = 0;
                        int small = 0;

                        if (b > a)
                        {
                            big = b;
                            small = a;
                        }
                        else
                        {
                            big = a;
                            small = b;
                        }

                        int moves = (int)Math.Floor((float)big / small);
                        for (int i = 0; i < moves; i++)
                        {
                            if (!cache[small, big - (small * (i + 1))])
                            {
                                res = true;

                                break;
                            }
                        }
                    }

                    if (a != 0 && b != 0)
                    {
                        decimal ratio = (decimal)a / b;
                        if (!res && golden < ratio)
                            sb.AppendLine(a + ", " + b + ": " + ratio);
                    }
                    cache[a, b] = cache[a, b] = res;
                    //return res;
                }

            }
            Console.WriteLine(sb);

            //Console.WriteLine(Tools.printArray(cache));

        }

        static void processCase(Case cas)
        {
            ulong alwasyWins = 0;
            for (int a = cas.input[0]; a <= cas.input[1]; a++)
            {
                int maxB = (int)Math.Floor(a / golden);
                int minB = (int)Math.Ceiling(a * golden);
                int delta = cas.input[3] - cas.input[2] + 1;
                alwasyWins += (ulong)Math.Min(delta, Math.Max(0, maxB - cas.input[2] + 1));
                alwasyWins += (ulong)Math.Min(delta, Math.Max(0, cas.input[3] - minB + 1));
            }
            cas.output = alwasyWins + "";
        }


        public static string Solve(string input)
        {
            Case[] cases = Case.parseinput(input);
            for (int i = 0; i < cases.Length; i++)
            {
                Console.WriteLine("Case: " + i);
                processCase(cases[i]);
            }
            return writeOutput(cases);
        }

        static string writeOutput(Case[] cases)
        {
            var sb = new StringBuilder();
            for (var i = 0; i < cases.Length; i++)
            {
                sb.AppendLine("Case #" + (i + 1) + ": " + cases[i].output);

            }
            return sb.ToString(); ;
        }

        class Case
        {
            public int[] input;
            public string output;

            public static Case[] parseinput(string input)
            {
                string[] lines = input.Trim().Split('\n').Select(l => l.TrimEnd('\r')).ToArray();

                long nbCases = Convert.ToInt64(lines[0]);
                Case[] cases = new Case[nbCases];

                for (int i = 0; i < nbCases; i++)
                {
                    var caseLine = i + 1;
                    var lineParts = lines[caseLine].Split(' ');
                    Case newcase = new Case { input = lineParts.Select(n => Convert.ToInt32(n)).ToArray() };
                    cases[i] = newcase;
                }
                return cases;
            }
        }
    }

}

