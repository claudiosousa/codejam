using CodeJam.algos;
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeJam
{

    class Solver
    {
        static int[,] maxVal;
        static int[] activities;
        static int eMax;
        static int r;
        static int getMaxValue(int index, int energy)
        {
            if (maxVal[index, energy - 1] >= 0)
                return maxVal[index, energy - 1];
            int maxE = 0;
            if (index != activities.Length - 1)
            {
                int mixE2use = Math.Max(0, energy + r - eMax);
                for (int i = mixE2use; i <= energy; i++)
                {
                    int roundE = i * activities[index];
                    int nextE = Math.Min(eMax, energy - i + r);
                    roundE += getMaxValue(index + 1, nextE);
                    maxE = Math.Max(maxE, roundE);
                }
            }
            else
                maxE = energy * activities[index];
            maxVal[index, energy - 1] = maxE;
            return maxE;
        }
        static void processCase(Case cas)
        {
            eMax = cas.input[0][0];
            r = cas.input[0][1];
            activities = cas.input[1];
            maxVal = new int[activities.Length, eMax];
            for (int i = 0; i < activities.Length; i++)
            {
                for (int j = 0; j < eMax; j++)
                {
                    maxVal[i, j] = -1;
                }
            }
            var res = getMaxValue(0, eMax);
            //Console.WriteLine(Tools.printArray(maxVal));
            cas.output = res + "";
        }

        public static string Solve(string input)
        {       
            Case[] cases = Case.parseinput(input);
            for (int i = 0; i < cases.Length; i++)
            {
                Console.WriteLine("Case: " + i);
                processCase(cases[i]);
            }
            return writeOutput(cases);         
        }

        static string writeOutput(Case[] cases)
        {
            var sb = new StringBuilder();
            for (var i = 0; i < cases.Length; i++)
            {
                sb.AppendLine("Case #" + (i + 1) + ": " + cases[i].output);

            }
            return sb.ToString(); ;
        }

        class Case
        {
            public int[][] input;
            public string output;

            public static Case[] parseinput(string input)
            {
                string[] lines = input.Trim().Split('\n');

                int nbCases = Convert.ToInt32(lines[0]);
                Case[] cases = new Case[nbCases];

                int iLine = 1;
                for (int i = 0; i < nbCases; i++)
                {
                    string[] lineParts = lines[iLine].Split(' ');
                    int[] linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();

                    int caseLines = 1;
                    Case newcase = new Case { input = new int[caseLines + 1][] };
                    newcase.input[0] = linePartsint;

                    for (var caseLine = 0; caseLine < caseLines; caseLine++)
                    {
                        iLine++;
                        lineParts = lines[iLine].Split(' ');
                        linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();
                        newcase.input[caseLine + 1] = linePartsint;
                    }
                    cases[i] = newcase;
                    iLine++;
                }
                return cases;
            }
        }
    }

}

