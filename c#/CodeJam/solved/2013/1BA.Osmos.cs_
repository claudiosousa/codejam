using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeJam
{

    class Solver
    {
        static int getOperationsRequeried(long mole, int[] toEat)
        {          
            while (toEat.Length > 0 && toEat[0] < mole)
            {
                mole += toEat[0];
                toEat = toEat.Skip(1).ToArray();
            }
            if (toEat.Length > 0)
            {
                var deleted = toEat.Skip(1).ToArray();
                int deleteOps = 1 + getOperationsRequeried(mole, deleted);
                if (mole > 1)
                {
                    int addedOps = 0;
                    long tempMole = mole + 0;
                    List<int> addedElements = new List<int>();
                    while (tempMole <= toEat[0])
                    {
                        addedElements.Add((int)tempMole - 1);
                        addedOps++;
                        tempMole += tempMole - 1;
                    }
                    addedElements.AddRange(toEat);
                    addedOps = addedOps + getOperationsRequeried(mole, addedElements.ToArray());
                    return Math.Min(deleteOps, addedOps);
                }
                return deleteOps;
            }
            return 0;
        }
        static void processCase(Case cas)
        {
            int a = cas.input[0][0];
            List<int> toEat = new List<int>(cas.input[1]);
            toEat.Sort();
            int operations = getOperationsRequeried(a, toEat.ToArray());
            cas.output = "" + operations;
        }

        public static string Solve(string input)
        {
            Case[] cases = Case.parseinput(input);
            for (int i = 0; i < cases.Length; i++)
            {
                Console.WriteLine("Case: " + i);
                processCase(cases[i]);
            }
            return writeOutput(cases);
        }

        static string writeOutput(Case[] cases)
        {
            var sb = new StringBuilder();
            for (var i = 0; i < cases.Length; i++)
            {
                sb.AppendLine("Case #" + (i + 1) + ": " + cases[i].output);

            }
            return sb.ToString(); ;
        }

        class Case
        {
            public int[][] input;
            public string output;

            public static Case[] parseinput(string input)
            {
                string[] lines = input.Trim().Split('\n');

                int nbCases = Convert.ToInt32(lines[0]);
                Case[] cases = new Case[nbCases];

                int iLine = 1;
                for (int i = 0; i < nbCases; i++)
                {
                    string[] lineParts = lines[iLine].Split(' ');
                    int[] linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();

                    int caseLines = 1;
                    Case newcase = new Case { input = new int[caseLines + 1][] };
                    newcase.input[0] = linePartsint;

                    for (var caseLine = 0; caseLine < caseLines; caseLine++)
                    {
                        iLine++;
                        lineParts = lines[iLine].Split(' ');
                        linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();
                        newcase.input[caseLine + 1] = linePartsint;
                    }
                    cases[i] = newcase;
                    iLine++;
                }
                return cases;
            }
        }
    }

}

