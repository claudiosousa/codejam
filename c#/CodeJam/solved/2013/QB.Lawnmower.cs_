using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeJam
{

    class Solver
    {
        static void processCase(Case cas)
        {
            int n = cas.input[0][0];
            int m = cas.input[0][1];
            int[][] curerentInput = cas.input.Skip(1).ToArray();
            bool[,] okCells = new bool[m, n];
            for (int y = 0; y < n; y++)
            {
                var rowMaxValue = 0;
                for (int x = 0; x < m; x++)
                {
                    int cellValue = curerentInput[y][x];
                    rowMaxValue = Math.Max(rowMaxValue, cellValue);
                }
                for (int x = 0; x < m; x++)
                {
                    int cellValue = curerentInput[y][x];
                    if (cellValue == rowMaxValue)
                        okCells[x, y] = true;
                }
            }
            for (int x = 0; x < m; x++)
            {
                var columnMaxValue = 0;
                for (int y = 0; y < n; y++)
                {
                    int cellValue = curerentInput[y][x];
                    columnMaxValue = Math.Max(columnMaxValue, cellValue);
                }
                for (int y = 0; y < n; y++)
                {
                    int cellValue = curerentInput[y][x];
                    if (cellValue == columnMaxValue)
                        okCells[x, y] = true;
                    else if (!okCells[x, y])
                    {
                        cas.output = "NO";
                        return;
                    }
                }
            }

            cas.output = "YES";
        }

        public static string Solve(string input)
        {
            Case[] cases = Case.parseinput(input);
            for (int i = 0; i < cases.Length; i++)
            {
                processCase(cases[i]);
            }
            return writeOutput(cases);
        }

        static string writeOutput(Case[] cases)
        {
            var sb = new StringBuilder();
            for (var i = 0; i < cases.Length; i++)
            {
                sb.AppendLine("Case #" + (i + 1) + ": " + cases[i].output);

            }
            return sb.ToString(); ;
        }

        class Case
        {
            public int[][] input;
            public string output;

            public static Case[] parseinput(string input)
            {
                string[] lines = input.Trim().Split('\n');

                int nbCases = Convert.ToInt32(lines[0]);
                Case[] cases = new Case[nbCases];

                int iLine = 1;
                for (int i = 0; i < nbCases; i++)
                {
                    string[] lineParts = lines[iLine].Split(' ');
                    int[] linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();

                    int caseLines = linePartsint[0];
                    Case newcase = new Case { input = new int[caseLines + 1][] };
                    newcase.input[0] = linePartsint;

                    for (var caseLine = 0; caseLine < caseLines; caseLine++)
                    {
                        iLine++;
                        lineParts = lines[iLine].Split(' ');
                        linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();
                        newcase.input[caseLine + 1] = linePartsint;
                    }
                    cases[i] = newcase;
                    iLine++;
                }
                return cases;
            }
        }
    }

}

