using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeJam
{

    class Solver
    {
        static void processCase(Case cas)
        {
            HashSet<string> exists = new HashSet<string>();
            for (int i = 0; i < cas.existing.Length; i++)
            {
                exists.Add(cas.existing[i]);
            }
            int mkdirs = 0;
            for (int i = 0; i < cas.newPaths.Length; i++)
            {
                string newPath = cas.newPaths[i];
                if (exists.Contains(newPath))
                    continue;
                string[] newPathParts = newPath.Split('/').Skip(1).ToArray();
                var cumulPath = "";
                for (int j = 0; j < newPathParts.Length; j++)
                {
                    cumulPath += "/" + newPathParts[j];
                    if (!exists.Contains(cumulPath))
                    {
                        mkdirs++;
                        exists.Add(cumulPath);
                    }
                }
            }
            cas.output = mkdirs + "";
        }

        public static string Solve(string input)
        {
            Case[] cases = Case.parseinput(input);
            for (int i = 0; i < cases.Length; i++)
            {
                processCase(cases[i]);
            }
            return writeOutput(cases);
        }

        static string writeOutput(Case[] cases)
        {
            var sb = new StringBuilder();
            for (var i = 0; i < cases.Length; i++)
            {
                sb.AppendLine("Case #" + (i + 1) + ": " + cases[i].output);

            }
            return sb.ToString(); ;
        }

        class Case
        {
            public string[] existing;
            public string[] newPaths;
            public string output;

            public static Case[] parseinput(string input)
            {
                string[] lines = input.Trim().Split('\n').Select(l=>l.TrimEnd('\r')).ToArray();

                int nbCases = Convert.ToInt32(lines[0]);
                Case[] cases = new Case[nbCases];

                int iLine = 1;
                for (int i = 0; i < nbCases; i++)
                {
                    int[] casePaths = lines[iLine].Split(' ').Select(p => Convert.ToInt32(p)).ToArray();
                    Case newcase = new Case { existing = new string[casePaths[0]], newPaths = new string[casePaths[1]] };

                    for (var j = 0; j < casePaths[0]; j++)
                    {
                        iLine++;
                        newcase.existing[j] = lines[iLine];
                    }
                    for (var j = 0; j < casePaths[1]; j++)
                    {
                        iLine++;
                        newcase.newPaths[j] = lines[iLine];
                    }
                    cases[i] = newcase;
                    iLine++;
                }
                return cases;
            }
        }
    }

}

