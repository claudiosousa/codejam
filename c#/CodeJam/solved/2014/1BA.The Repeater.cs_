using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeJam
{

    class Solver
    {

        string solveCase(string[][] input)
        {
            List<object[]> strings = new List<object[]>();
            for (int i = 1; i < input.Length; i++)
            {
                strings.Add(new object[] { input[i][0], 0 });
            }
            int requiredMoves = 0;
            bool end = false;
            do
            {
                char cha = default(char);

                int chaFound = 0;
                int[] chaFounds = new int[strings.Count];
                for (int i = 0; i < strings.Count; i++)
                {
                    var strObj = strings[i];
                    var str = strObj[0].ToString();
                    var charPOs = int.Parse(strObj[1].ToString());
                    int initialCHarPos = charPOs + 0;
                    if (i == 0)
                    {
                        if (charPOs >= str.Length)
                        {
                            end = true;
                            break;
                        }
                        cha = str[charPOs];
                        charPOs++;
                        chaFound = 1;
                    }
                    while (charPOs < str.Length)
                    {
                        if (str[charPOs] != cha)
                            break;
                        chaFound++;
                        charPOs++;
                    }
                    strObj[1] = charPOs;
                    chaFounds[i] = charPOs - initialCHarPos;
                    if (charPOs == initialCHarPos)
                    {
                        return "Fegla Won";

                    }
                }
                if (end)
                    break;
                int toHaveCost = int.MaxValue;
                int toHaveTemp = 1, toHaveCostTemp;
                do
                {
                    toHaveCostTemp = 0;
                    for (int j = 0; j < chaFounds.Length; j++)
                    {
                        toHaveCostTemp += Math.Abs(chaFounds[j] - toHaveTemp);
                    }
                    if (toHaveCostTemp >= toHaveCost)
                        break;
                    toHaveCost = toHaveCostTemp + 0;
                    toHaveTemp++;
                } while (true);
                /*
                if (chaFound % strings.Count > strings.Count / 2)
                {
                    toHave = chaFound / strings.Count + 1;
                }
                else
                    toHave = chaFound / strings.Count;


                for (int j = 0; j < chaFounds.Length; j++)
                {
                    requiredMoves += Math.Abs(chaFounds[j] - toHave);
                }
            */
                requiredMoves += toHaveCost;
            } while (true);

            for (int i = 0; i < strings.Count; i++)
            {
                var strObj = strings[i];
                var str = strObj[0].ToString();
                var charPOs = int.Parse(strObj[1].ToString());
                if (charPOs != str.Length)
                    return "Fegla Won";
            }
            return requiredMoves + "";
        }


        public string Solve(string input)
        {
            string[] lines = input.Trim().Split('\n').Select(l => l.TrimEnd('\r')).ToArray();

            StringBuilder sb = new StringBuilder();
            int nbCases = Convert.ToInt32(lines[0]);
            int iLine = 1;
            for (int i = 0; i < nbCases; i++)
            {
                //Console.WriteLine("Case: " + i);

                string[] lineParts = lines[iLine].Split(' ');

                int caseLines = Convert.ToInt32(lineParts[0]);
                string[][] caseInput = new string[caseLines + 1][];
                caseInput[0] = lineParts;

                for (var caseLine = 0; caseLine < caseLines; caseLine++)
                {
                    iLine++;
                    lineParts = lines[iLine].Split(' ');
                    caseInput[caseLine + 1] = lineParts;
                }
                string result = solveCase(caseInput);
                sb.AppendLine("Case #" + (i + 1) + ": " + result);
                iLine++;
            }
            return sb.ToString();
        }
    }

}

