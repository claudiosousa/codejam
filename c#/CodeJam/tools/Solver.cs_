using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;

namespace CodeJam
{

    class Solver
    {
        //cost: number of STILL non empty plates
        //won: half (trunc) of the max(number pankakes per plate)
        bool shouldCut(List<int> plates, int splitings)
        {
            plates.Sort();
            plates.Reverse();
            int halfMax = plates[0] / 2;
            int winningBy = plates[0] - halfMax - 1;
            if (plates[1] > halfMax)
            for (int i = 1; i < plates.Count; i++)
            {
                int p = plates[i];
                if (p <= halfMax)
                    return true;

                var mod = p % 2;
                winningBy += p / 2;
            }

        }
        string solveCase(int[][] input)
        {
            List<int> plates = new List<int>(input[1]);
            int minutes = 0;
            do
            {
                minutes++;
                if (shouldCut(new List<int>(plates)))
                {
                    int maxPankakes = plates.Max();
                    int pi = plates.IndexOf(maxPankakes);
                    int half = plates[pi] / 2;
                    plates[pi] = half;
                    plates.Add(half);
                    continue;
                }

                int i = 0;
                do
                {
                    int p = plates[i];
                    if (p == 1)
                        plates.RemoveAt(i);
                    else
                    {
                        plates[i]--;
                        i++;
                    }
                } while (i < plates.Count);

            } while (plates.Count > 0);
            return minutes.ToString();
        }


        public string Solve(string input)
        {
            string[] lines = input.Trim().Split('\n').Select(l => l.TrimEnd('\r')).ToArray();

            StringBuilder sb = new StringBuilder();
            int nbCases = Convert.ToInt32(lines[0]);
            int iLine = 1;
            for (int i = 0; i < nbCases; i++)
            {
                //Console.WriteLine("Case: " + i);

                string[] lineParts = lines[iLine].Split(' ');
                int[] linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();

                int caseLines = 1;
                int[][] caseInput = new int[caseLines + 1][];
                caseInput[0] = linePartsint;

                for (var caseLine = 0; caseLine < caseLines; caseLine++)
                {
                    iLine++;
                    lineParts = lines[iLine].Split(' ');
                    linePartsint = lineParts.Select(p => Convert.ToInt32(p)).ToArray();
                    caseInput[caseLine + 1] = linePartsint;
                }
                string result = solveCase(caseInput);
                sb.AppendLine("Case #" + (i + 1) + ": " + result);
                iLine++;
            }
            return sb.ToString();
        }
    }

}

